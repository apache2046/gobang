/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={651:(e,t,n)=>{const{createElement:s,Component:o}=n(400),r=n(215);e.exports=class extends o{constructor(e){super(e),this.state={vertexSize:1,visibility:"hidden"}}componentDidMount(){this.componentDidUpdate()}componentDidUpdate(e){let{showCoordinates:t,maxWidth:n,maxHeight:s,maxVertexSize:o,rangeX:r,rangeY:i,signMap:l,onResized:a=(()=>{})}=this.props;if("visible"!==this.state.visibility||t!==e.showCoordinates||n!==e.maxWidth||s!==e.maxHeight||o!==e.maxVertexSize||JSON.stringify(r)!==JSON.stringify(e.rangeX)||JSON.stringify(i)!==JSON.stringify(e.rangeY)||l.length!==e.signMap.length||(l[0]||[]).length!==(e.signMap[0]||[]).length){let{offsetWidth:e,offsetHeight:t}=this.element,o=Math.min(n/e,s/t),r=Math.max(Math.floor(this.state.vertexSize*o),1);this.state.vertexSize!==r&&this.setState({vertexSize:r},a),"visible"!==this.state.visibility&&this.setState({visibility:"visible"})}}render(){let{innerProps:e={},style:t={},maxVertexSize:n=1/0}=this.props,{ref:o=(()=>{})}=e;return s(r,Object.assign({},this.props,{innerProps:Object.assign({},e,{ref:e=>(o(e),this.element=e)}),style:Object.assign({visibility:this.state.visibility},t),vertexSize:Math.min(this.state.vertexSize,n)}))}}},856:(e,t,n)=>{const{createElement:s,Component:o}=n(400),{alpha:r}=n(881);e.exports={CoordX:class extends o{render(){let{style:e,xs:t,coordX:n=(e=>r[e]||r[r.length-1])}=this.props;return s("div",{className:"shudan-coordx",style:Object.assign({display:"flex",textAlign:"center"},e)},t.map((e=>s("div",{key:e,style:{width:"1em"}},s("span",{style:{display:"block"}},n(e))))))}},CoordY:class extends o{render(){let{style:e,height:t,ys:n,coordY:o=(e=>t-e)}=this.props;return s("div",{className:"shudan-coordy",style:Object.assign({textAlign:"center"},e)},n.map((e=>s("div",{key:e,style:{height:"1em"}},s("span",{style:{display:"block"}},o(e))))))}}}},215:(e,t,n)=>{const{createElement:s,Component:o}=n(400),r=n(184),i=n(881),{CoordX:l,CoordY:a}=n(856),h=n(232),u=n(577),p=n(401);class d extends o{constructor(e){super(e),this.state={}}componentDidUpdate(){if(this.props.animateStonePlacement&&!this.state.clearAnimatedVerticesHandler&&this.state.animatedVertices.length>0){for(let[e,t]of this.state.animatedVertices)this.state.shiftMap[t][e]=i.random(7)+1,i.readjustShifts(this.state.shiftMap,[e,t]);this.setState({shiftMap:this.state.shiftMap}),this.setState({clearAnimatedVerticesHandler:setTimeout((()=>{this.setState({animatedVertices:[],clearAnimatedVerticesHandler:null})}),this.props.animationDuration||200)})}}render(){let{width:e,height:t,rangeX:n,rangeY:o,xs:d,ys:_,hoshis:c,shiftMap:m,randomMap:f}=this.state,{innerProps:g={},vertexSize:y=24,coordX:v,coordY:x,busy:b,signMap:S,paintMap:k,heatMap:M,markerMap:w,ghostStoneMap:C,fuzzyStonePlacement:P=!1,showCoordinates:E=!1,lines:z=[],selectedVertices:N=[],dimmedVertices:$=[]}=this.props,O=[].concat(...this.state.animatedVertices.map(i.neighborhood));return s("div",Object.assign({},g,{id:this.props.id,className:r("shudan-goban","shudan-goban-image",{"shudan-busy":b,"shudan-coordinates":E})+" "+(this.props.class||this.props.className||""),style:Object.assign({display:"inline-grid",gridTemplateRows:E?"1em 1fr 1em":"1fr",gridTemplateColumns:E?"1em 1fr 1em":"1fr",fontSize:y,lineHeight:"1em"},this.props.style||{})}),E&&s(l,{xs:d,style:{gridRow:"1",gridColumn:"2"},coordX:v}),E&&s(a,{height:t,ys:_,style:{gridRow:"2",gridColumn:"1"},coordY:x}),s("div",{className:"shudan-content",style:{position:"relative",width:`${d.length}em`,height:`${_.length}em`,gridRow:E?"2":"1",gridColumn:E?"2":"1"}},s(h,{vertexSize:y,width:e,height:t,xs:d,ys:_,hoshis:c}),s("div",{className:"shudan-vertices",style:{display:"grid",gridTemplateColumns:`repeat(${d.length}, 1em)`,gridTemplateRows:`repeat(${_.length}, 1em)`,position:"absolute",top:0,left:0,right:0,bottom:0,zIndex:1}},_.map((e=>d.map((t=>{let n=n=>i.vertexEquals(n,[t,e]),o=N.some(n);return s(u,Object.assign({key:[t,e].join("-"),position:[t,e],shift:P?m&&m[e]&&m[e][t]:0,random:f&&f[e]&&f[e][t],sign:S&&S[e]&&S[e][t],heat:M&&M[e]&&M[e][t],paint:k&&k[e]&&k[e][t],marker:w&&w[e]&&w[e][t],ghostStone:C&&C[e]&&C[e][t],dimmed:$.some(n),animate:O.some(n),selected:o,selectedLeft:o&&N.some((n=>i.vertexEquals(n,[t-1,e]))),selectedRight:o&&N.some((n=>i.vertexEquals(n,[t+1,e]))),selectedTop:o&&N.some((n=>i.vertexEquals(n,[t,e-1]))),selectedBottom:o&&N.some((n=>i.vertexEquals(n,[t,e+1])))},...i.vertexEvents.map((e=>({[`on${e}`]:this.props[`onVertex${e}`]})))))}))))),s("div",{className:"shudan-lines",style:{position:"absolute",top:0,left:0,right:0,bottom:0,overflow:"hidden",pointerEvents:"none",zIndex:2}},s("div",{style:{position:"absolute",top:`-${o[0]}em`,left:`-${n[0]}em`,width:`${e}em`,height:`${t}em`}},z.map((({v1:e,v2:t,type:n},o)=>s(p,{key:o,v1:e,v2:t,type:n,vertexSize:y})))))),E&&s(a,{height:t,ys:_,style:{gridRow:"2",gridColumn:"3"},coordY:x}),E&&s(l,{xs:d,style:{gridRow:"3",gridColumn:"2"},coordX:v}))}}d.getDerivedStateFromProps=function(e,t){let{signMap:n=[],rangeX:s=[0,1/0],rangeY:o=[0,1/0]}=e,r=0===n.length?0:n[0].length,l=n.length;if(t.width===r&&t.height===l){let a=t.animatedVertices;e.animateStonePlacement&&e.fuzzyStonePlacement&&null==t.clearAnimatedVerticesHandler&&(a=i.diffSignMap(t.signMap,n));let h={signMap:n,animatedVertices:a};return i.vertexEquals(t.rangeX,s)&&i.vertexEquals(t.rangeY,o)||Object.assign(h,{rangeX:s,rangeY:o,xs:i.range(r).slice(s[0],s[1]+1),ys:i.range(l).slice(o[0],o[1]+1)}),h}return{signMap:n,width:r,height:l,rangeX:s,rangeY:o,animatedVertices:[],clearAnimatedVerticesHandler:null,xs:i.range(r).slice(s[0],s[1]+1),ys:i.range(l).slice(o[0],o[1]+1),hoshis:i.getHoshis(r,l),shiftMap:i.readjustShifts(n.map((e=>e.map((e=>i.random(8)))))),randomMap:n.map((e=>e.map((e=>i.random(4)))))}},e.exports=d},232:(e,t,n)=>{const{createElement:s,Component:o}=n(400);e.exports=class extends o{shouldComponentUpdate(e){return e.vertexSize!==this.props.vertexSize||e.width!==this.props.width||e.height!==this.props.height||e.xs.length!==this.props.xs.length||e.ys.length!==this.props.ys.length||e.xs[0]!==this.props.xs[0]||e.ys[0]!==this.props.ys[0]}render(){let{vertexSize:e,width:t,height:n,xs:o,ys:r,hoshis:i}=this.props,l=e/2,a=Math.floor;return o.length>0&&r.length>0&&s("svg",{className:"shudan-grid",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%",zIndex:0}},r.map(((n,r)=>{let i=0===o[0]?l:0;return s("rect",{key:`h${r}`,className:"shudan-gridline shudan-horizontal",x:a(i),y:a((2*r+1)*l),width:o[o.length-1]===t-1?a((2*o.length-1)*l-i):a(o.length*e-i),height:1})})),o.map(((t,o)=>{let i=0===r[0]?l:0;return s("rect",{key:`v${o}`,className:"shudan-gridline shudan-vertical",x:a((2*o+1)*l),y:a(i),width:1,height:r[r.length-1]===n-1?a((2*r.length-1)*l-i):a(r.length*e-i)})})),i.map((([e,t])=>{let n=o.indexOf(e),i=r.indexOf(t);if(!(n<0||i<0))return s("circle",{key:[e,t].join("-"),className:"shudan-hoshi",cx:a((2*n+1)*l)+.5,cy:a((2*i+1)*l)+.5,r:".1em"})})))}}},401:(e,t,n)=>{const{createElement:s,Component:o}=n(400),{vertexEquals:r}=n(881);e.exports=class extends o{shouldComponentUpdate(e){let{v1:t,v2:n,type:s,vertexSize:o}=this.props;return s!==e.type||o!==e.vertexSize||!r(t,e.v1)||!r(n,e.v2)}render(){let{v1:e,v2:t,type:n="line",vertexSize:o}=this.props;if(r(e,t))return;let[i,l]=[e,t].map((e=>e.map((e=>e*o)))),[a,h]=i.map(((e,t)=>l[t]-e)),[u,p]=i.map(((e,t)=>(e+l[t]+o)/2)),d=180*Math.atan2(h,a)/Math.PI,_=Math.sqrt(a*a+h*h);return s("div",{className:`shudan-${n}`,style:{position:"absolute",left:u,top:p,margin:0,width:_,transform:`translateX(${-_/2}px) rotate(${d}deg)`}})}}},577:(e,t,n)=>{const{createElement:s,Component:o}=n(400),r=n(184),{vertexEvents:i}=n(881),l=e=>({position:"absolute",zIndex:e});e.exports=class extends o{constructor(e){super(e);for(let e of i)this[`handle${e}`]=t=>{(this.props[`on${e}`]||(()=>{}))(t,this.props.position)}}shouldComponentUpdate(e){return this.props.shift!==e.shift||this.props.random!==e.random||this.props.sign!==e.sign||this.props.selected!==e.selected||this.props.heat!==e.heat||this.props.paint!==e.paint||this.props.dimmed!==e.dimmed||this.props.marker!==e.marker||this.props.ghostStone!==e.ghostStone||this.props.animate!==e.animate}render(){let{position:e,shift:t,random:n,sign:o,heat:a,paint:h,dimmed:u,marker:p,ghostStone:d,animate:_,selected:c,selectedLeft:m,selectedRight:f,selectedTop:g,selectedBottom:y}=this.props,v=e=>!!p&&s("div",{key:"marker",className:"shudan-marker",title:p.label,style:l(e)});return s("div",Object.assign({"data-x":e[0],"data-y":e[1],style:{position:"relative"},className:r("shudan-vertex",`shudan-random_${n}`,`shudan-sign_${o}`,{[`shudan-shift_${t}`]:!!t,[`shudan-heat_${!!a&&a.strength}`]:!!a,["shudan-paint_"+(h>0?1:-1)]:!!h,"shudan-dimmed":u,"shudan-selected":c,"shudan-selectedleft":m,"shudan-selectedright":f,"shudan-selectedtop":g,"shudan-selectedbottom":y,"shudan-animate":_},p&&p.type&&`shudan-marker_${p.type}`,p&&"label"===p.type&&p.label&&(p.label.includes("\n")||p.label.length>=3)&&"shudan-smalllabel",d&&`shudan-ghost_${d.sign}`,d&&d.type&&`shudan-ghost_${d.type}`,d&&d.faint&&"shudan-ghost_faint")},...i.map((e=>({[`on${e}`]:this[`handle${e}`]})))),!o&&v(0),!o&&!!d&&s("div",{key:"ghost",className:"shudan-ghost",style:l(1)}),s("div",{key:"stone",className:"shudan-stone",style:l(2)},!!o&&s("div",{key:"shadow",className:"shudan-shadow",style:l()}),!!o&&s("div",{key:"inner",className:r("shudan-inner","shudan-stone-image",`shudan-random_${n}`,`shudan-sign_${o}`),style:l()},o),!!o&&v()),!!h&&s("div",{key:"paint",className:"shudan-paint",style:{...l(3),opacity:.5*Math.abs(h||0)}}),!!c&&s("div",{key:"selection",className:"shudan-selection",style:l(4)}),s("div",{key:"heat",className:"shudan-heat",style:l(5)}),!!a&&s("div",{key:"heatlabel",className:"shudan-heatlabel",style:l(6)},a.text&&a.text.toString()))}}},881:(e,t)=>{t.alpha="ABCDEFGHJKLMNOPQRSTUVWXYZ",t.vertexEvents=["Click","MouseDown","MouseUp","MouseMove","MouseEnter","MouseLeave","PointerDown","PointerUp","PointerMove","PointerEnter","PointerLeave"],t.range=e=>Array(e).fill(0).map(((e,t)=>t)),t.random=e=>Math.floor(Math.random()*(e+1)),t.neighborhood=([e,t])=>[[e,t],[e-1,t],[e+1,t],[e,t-1],[e,t+1]],t.vertexEquals=([e,t],[n,s])=>e===n&&t===s,t.lineEquals=([e,n],[s,o])=>t.vertexEquals(e,s)&&t.vertexEquals(n,o),t.getHoshis=function(e,t){if(Math.min(e,t)<=6)return[];let[n,s]=[e,t].map((e=>e>=13?3:2)),[o,r]=[e-n-1,t-s-1],[i,l]=[e,t].map((e=>(e-1)/2)),a=[[n,r],[o,s],[o,r],[n,s]];return e%2!=0&&t%2!=0&&7!==e&&7!==t&&a.push([i,l]),e%2!=0&&7!==e&&a.push([i,s],[i,r]),t%2!=0&&7!==t&&a.push([n,l],[o,l]),a},t.readjustShifts=function(e,n=null){if(null==n)for(let n=0;n<e.length;n++)for(let s=0;s<e[0].length;s++)t.readjustShifts(e,[s,n]);else{let[t,s]=n,o=e[s][t],r=[[[1,5,8],[t-1,s],[3,7,6]],[[2,5,6],[t,s-1],[4,7,8]],[[3,7,6],[t+1,s],[1,5,8]],[[4,7,8],[t,s+1],[2,5,6]]];for(let[t,[n,s],i]of r)t.includes(o)&&e[s]&&i.includes(e[s][n])&&(e[s][n]=0)}return e},t.diffSignMap=function(e,t){if(e===t||0===e.length||e.length!==t.length||e[0].length!==t[0].length)return[];let n=[];for(let s=0;s<e.length;s++)for(let o=0;o<e[0].length;o++)0===e[s][o]&&null!=t[s]&&t[s][o]&&n.push([o,s]);return n}},28:(e,t,n)=>{const s=n(215),o=n(651);e.exports={Goban:s,BoundedGoban:o}},184:(e,t)=>{var n;!function(){"use strict";var s={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var r=typeof n;if("string"===r||"number"===r)e.push(n);else if(Array.isArray(n)){if(n.length){var i=o.apply(null,n);i&&e.push(i)}}else if("object"===r)if(n.toString===Object.prototype.toString)for(var l in n)s.call(n,l)&&n[l]&&e.push(l);else e.push(n.toString())}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},400:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Component:()=>x,Fragment:()=>v,cloneElement:()=>L,createContext:()=>R,createElement:()=>f,createRef:()=>y,h:()=>f,hydrate:()=>X,isValidElement:()=>i,options:()=>o,render:()=>H,toChildArray:()=>P});var s,o,r,i,l,a,h,u,p={},d=[],_=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function c(e,t){for(var n in t)e[n]=t[n];return e}function m(e){var t=e.parentNode;t&&t.removeChild(e)}function f(e,t,n){var o,r,i,l={};for(i in t)"key"==i?o=t[i]:"ref"==i?r=t[i]:l[i]=t[i];if(arguments.length>2&&(l.children=arguments.length>3?s.call(arguments,2):n),"function"==typeof e&&null!=e.defaultProps)for(i in e.defaultProps)void 0===l[i]&&(l[i]=e.defaultProps[i]);return g(e,l,o,r,null)}function g(e,t,n,s,i){var l={type:e,props:t,key:n,ref:s,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==i?++r:i};return null==i&&null!=o.vnode&&o.vnode(l),l}function y(){return{current:null}}function v(e){return e.children}function x(e,t){this.props=e,this.context=t}function b(e,t){if(null==t)return e.__?b(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?b(e):null}function S(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return S(e)}}function k(e){(!e.__d&&(e.__d=!0)&&l.push(e)&&!M.__r++||h!==o.debounceRendering)&&((h=o.debounceRendering)||a)(M)}function M(){for(var e;M.__r=l.length;)e=l.sort((function(e,t){return e.__v.__b-t.__v.__b})),l=[],e.some((function(e){var t,n,s,o,r,i;e.__d&&(r=(o=(t=e).__v).__e,(i=t.__P)&&(n=[],(s=c({},o)).__v=o.__v+1,j(i,o,s,t.__n,void 0!==i.ownerSVGElement,null!=o.__h?[r]:null,n,null==r?b(o):r,o.__h),D(n,o),o.__e!=r&&S(o)))}))}function w(e,t,n,s,o,r,i,l,a,h){var u,_,c,m,f,y,x,S=s&&s.__k||d,k=S.length;for(n.__k=[],u=0;u<t.length;u++)if(null!=(m=n.__k[u]=null==(m=t[u])||"boolean"==typeof m?null:"string"==typeof m||"number"==typeof m||"bigint"==typeof m?g(null,m,null,null,m):Array.isArray(m)?g(v,{children:m},null,null,null):m.__b>0?g(m.type,m.props,m.key,null,m.__v):m)){if(m.__=n,m.__b=n.__b+1,null===(c=S[u])||c&&m.key==c.key&&m.type===c.type)S[u]=void 0;else for(_=0;_<k;_++){if((c=S[_])&&m.key==c.key&&m.type===c.type){S[_]=void 0;break}c=null}j(e,m,c=c||p,o,r,i,l,a,h),f=m.__e,(_=m.ref)&&c.ref!=_&&(x||(x=[]),c.ref&&x.push(c.ref,null,m),x.push(_,m.__c||f,m)),null!=f?(null==y&&(y=f),"function"==typeof m.type&&m.__k===c.__k?m.__d=a=C(m,a,e):a=E(e,m,c,S,f,a),"function"==typeof n.type&&(n.__d=a)):a&&c.__e==a&&a.parentNode!=e&&(a=b(c))}for(n.__e=y,u=k;u--;)null!=S[u]&&("function"==typeof n.type&&null!=S[u].__e&&S[u].__e==n.__d&&(n.__d=b(s,u+1)),T(S[u],S[u]));if(x)for(u=0;u<x.length;u++)A(x[u],x[++u],x[++u])}function C(e,t,n){for(var s,o=e.__k,r=0;o&&r<o.length;r++)(s=o[r])&&(s.__=e,t="function"==typeof s.type?C(s,t,n):E(n,s,s,o,s.__e,t));return t}function P(e,t){return t=t||[],null==e||"boolean"==typeof e||(Array.isArray(e)?e.some((function(e){P(e,t)})):t.push(e)),t}function E(e,t,n,s,o,r){var i,l,a;if(void 0!==t.__d)i=t.__d,t.__d=void 0;else if(null==n||o!=r||null==o.parentNode)e:if(null==r||r.parentNode!==e)e.appendChild(o),i=null;else{for(l=r,a=0;(l=l.nextSibling)&&a<s.length;a+=2)if(l==o)break e;e.insertBefore(o,r),i=r}return void 0!==i?i:o.nextSibling}function z(e,t,n){"-"===t[0]?e.setProperty(t,n):e[t]=null==n?"":"number"!=typeof n||_.test(t)?n:n+"px"}function N(e,t,n,s,o){var r;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof s&&(e.style.cssText=s=""),s)for(t in s)n&&t in n||z(e.style,t,"");if(n)for(t in n)s&&n[t]===s[t]||z(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])r=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+r]=n,n?s||e.addEventListener(t,r?O:$,r):e.removeEventListener(t,r?O:$,r);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null!=n&&(!1!==n||"a"===t[0]&&"r"===t[1])?e.setAttribute(t,n):e.removeAttribute(t))}}function $(e){this.l[e.type+!1](o.event?o.event(e):e)}function O(e){this.l[e.type+!0](o.event?o.event(e):e)}function j(e,t,n,s,r,i,l,a,h){var u,p,d,_,m,f,g,y,b,S,k,M=t.type;if(void 0!==t.constructor)return null;null!=n.__h&&(h=n.__h,a=t.__e=n.__e,t.__h=null,i=[a]),(u=o.__b)&&u(t);try{e:if("function"==typeof M){if(y=t.props,b=(u=M.contextType)&&s[u.__c],S=u?b?b.props.value:u.__:s,n.__c?g=(p=t.__c=n.__c).__=p.__E:("prototype"in M&&M.prototype.render?t.__c=p=new M(y,S):(t.__c=p=new x(y,S),p.constructor=M,p.render=V),b&&b.sub(p),p.props=y,p.state||(p.state={}),p.context=S,p.__n=s,d=p.__d=!0,p.__h=[]),null==p.__s&&(p.__s=p.state),null!=M.getDerivedStateFromProps&&(p.__s==p.state&&(p.__s=c({},p.__s)),c(p.__s,M.getDerivedStateFromProps(y,p.__s))),_=p.props,m=p.state,d)null==M.getDerivedStateFromProps&&null!=p.componentWillMount&&p.componentWillMount(),null!=p.componentDidMount&&p.__h.push(p.componentDidMount);else{if(null==M.getDerivedStateFromProps&&y!==_&&null!=p.componentWillReceiveProps&&p.componentWillReceiveProps(y,S),!p.__e&&null!=p.shouldComponentUpdate&&!1===p.shouldComponentUpdate(y,p.__s,S)||t.__v===n.__v){p.props=y,p.state=p.__s,t.__v!==n.__v&&(p.__d=!1),p.__v=t,t.__e=n.__e,t.__k=n.__k,t.__k.forEach((function(e){e&&(e.__=t)})),p.__h.length&&l.push(p);break e}null!=p.componentWillUpdate&&p.componentWillUpdate(y,p.__s,S),null!=p.componentDidUpdate&&p.__h.push((function(){p.componentDidUpdate(_,m,f)}))}p.context=S,p.props=y,p.state=p.__s,(u=o.__r)&&u(t),p.__d=!1,p.__v=t,p.__P=e,u=p.render(p.props,p.state,p.context),p.state=p.__s,null!=p.getChildContext&&(s=c(c({},s),p.getChildContext())),d||null==p.getSnapshotBeforeUpdate||(f=p.getSnapshotBeforeUpdate(_,m)),k=null!=u&&u.type===v&&null==u.key?u.props.children:u,w(e,Array.isArray(k)?k:[k],t,n,s,r,i,l,a,h),p.base=t.__e,t.__h=null,p.__h.length&&l.push(p),g&&(p.__E=p.__=null),p.__e=!1}else null==i&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=U(n.__e,t,n,s,r,i,l,h);(u=o.diffed)&&u(t)}catch(e){t.__v=null,(h||null!=i)&&(t.__e=a,t.__h=!!h,i[i.indexOf(a)]=null),o.__e(e,t,n)}}function D(e,t){o.__c&&o.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){o.__e(e,t.__v)}}))}function U(e,t,n,o,r,i,l,a){var h,u,d,_=n.props,c=t.props,f=t.type,g=0;if("svg"===f&&(r=!0),null!=i)for(;g<i.length;g++)if((h=i[g])&&"setAttribute"in h==!!f&&(f?h.localName===f:3===h.nodeType)){e=h,i[g]=null;break}if(null==e){if(null===f)return document.createTextNode(c);e=r?document.createElementNS("http://www.w3.org/2000/svg",f):document.createElement(f,c.is&&c),i=null,a=!1}if(null===f)_===c||a&&e.data===c||(e.data=c);else{if(i=i&&s.call(e.childNodes),u=(_=n.props||p).dangerouslySetInnerHTML,d=c.dangerouslySetInnerHTML,!a){if(null!=i)for(_={},g=0;g<e.attributes.length;g++)_[e.attributes[g].name]=e.attributes[g].value;(d||u)&&(d&&(u&&d.__html==u.__html||d.__html===e.innerHTML)||(e.innerHTML=d&&d.__html||""))}if(function(e,t,n,s,o){var r;for(r in n)"children"===r||"key"===r||r in t||N(e,r,null,n[r],s);for(r in t)o&&"function"!=typeof t[r]||"children"===r||"key"===r||"value"===r||"checked"===r||n[r]===t[r]||N(e,r,t[r],n[r],s)}(e,c,_,r,a),d)t.__k=[];else if(g=t.props.children,w(e,Array.isArray(g)?g:[g],t,n,o,r&&"foreignObject"!==f,i,l,i?i[0]:n.__k&&b(n,0),a),null!=i)for(g=i.length;g--;)null!=i[g]&&m(i[g]);a||("value"in c&&void 0!==(g=c.value)&&(g!==e.value||"progress"===f&&!g||"option"===f&&g!==_.value)&&N(e,"value",g,_.value,!1),"checked"in c&&void 0!==(g=c.checked)&&g!==e.checked&&N(e,"checked",g,_.checked,!1))}return e}function A(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(e){o.__e(e,n)}}function T(e,t,n){var s,r;if(o.unmount&&o.unmount(e),(s=e.ref)&&(s.current&&s.current!==e.__e||A(s,null,t)),null!=(s=e.__c)){if(s.componentWillUnmount)try{s.componentWillUnmount()}catch(e){o.__e(e,t)}s.base=s.__P=null}if(s=e.__k)for(r=0;r<s.length;r++)s[r]&&T(s[r],t,"function"!=typeof e.type);n||null==e.__e||m(e.__e),e.__e=e.__d=void 0}function V(e,t,n){return this.constructor(e,n)}function H(e,t,n){var r,i,l;o.__&&o.__(e,t),i=(r="function"==typeof n)?null:n&&n.__k||t.__k,l=[],j(t,e=(!r&&n||t).__k=f(v,null,[e]),i||p,p,void 0!==t.ownerSVGElement,!r&&n?[n]:i?null:t.firstChild?s.call(t.childNodes):null,l,!r&&n?n:i?i.__e:t.firstChild,r),D(l,e)}function X(e,t){H(e,t,X)}function L(e,t,n){var o,r,i,l=c({},e.props);for(i in t)"key"==i?o=t[i]:"ref"==i?r=t[i]:l[i]=t[i];return arguments.length>2&&(l.children=arguments.length>3?s.call(arguments,2):n),g(e.type,l,o||e.key,r||e.ref,null)}function R(e,t){var n={__c:t="__cC"+u++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,s;return this.getChildContext||(n=[],(s={})[t]=this,this.getChildContext=function(){return s},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some(k)},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n}s=d.slice,o={__e:function(e,t,n,s){for(var o,r,i;t=t.__;)if((o=t.__c)&&!o.__)try{if((r=o.constructor)&&null!=r.getDerivedStateFromError&&(o.setState(r.getDerivedStateFromError(e)),i=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,s||{}),i=o.__d),i)return o.__E=o}catch(t){e=t}throw e}},r=0,i=function(e){return null!=e&&void 0===e.constructor},x.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=c({},this.state),"function"==typeof e&&(e=e(c({},n),this.props)),e&&c(n,e),null!=e&&this.__v&&(t&&this.__h.push(t),k(this))},x.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),k(this))},x.prototype.render=v,l=[],a="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,M.__r=0,u=0}},t={};function n(s){var o=t[s];if(void 0!==o)return o.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,n),r.exports}n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const{h:e,render:t,Component:s}=n(400),{Goban:o}=n(28),r=[[0,0,0,-1,-1,-1,1,0,1,1,-1,-1,0,-1,0,-1,-1,1,0],[0,0,-1,0,-1,1,1,1,0,1,-1,0,-1,-1,-1,-1,1,1,0],[0,0,-1,-1,-1,1,1,0,0,1,1,-1,-1,1,-1,1,0,1,0],[0,0,0,0,-1,-1,1,0,1,-1,1,1,1,1,1,0,1,0,0],[0,0,0,0,-1,0,-1,1,0,0,1,1,0,0,0,1,1,1,0],[0,0,-1,0,0,-1,-1,1,0,-1,-1,1,-1,-1,0,1,0,0,1],[0,0,0,-1,-1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1],[0,0,-1,1,1,0,1,-1,-1,1,0,1,-1,0,1,-1,-1,-1,1],[0,0,-1,-1,1,1,1,0,-1,1,-1,-1,0,-1,-1,1,1,1,1],[0,0,-1,1,1,-1,-1,-1,-1,1,1,1,-1,-1,-1,-1,1,-1,-1],[-1,-1,-1,-1,1,1,1,-1,0,-1,1,-1,-1,0,-1,1,1,-1,0],[-1,1,-1,0,-1,-1,-1,-1,-1,-1,1,-1,0,-1,-1,1,-1,0,-1],[1,1,1,1,-1,1,1,1,-1,1,0,1,-1,0,-1,1,-1,-1,0],[0,1,-1,1,1,-1,-1,1,-1,1,1,1,-1,1,-1,1,1,-1,1],[0,0,-1,1,0,0,1,1,-1,-1,0,1,-1,1,-1,1,-1,0,-1],[0,0,1,0,1,0,1,1,1,-1,-1,1,-1,-1,1,-1,-1,-1,0],[0,0,0,0,1,1,0,1,-1,0,-1,-1,1,1,1,1,-1,-1,-1],[0,0,1,1,-1,1,1,-1,0,-1,-1,1,1,1,1,0,1,-1,1],[0,0,0,1,-1,-1,-1,-1,-1,0,-1,-1,1,1,0,1,1,1,0]];t(e(class extends s{constructor(e){super(e),this.state={board:r,vertexSize:24,showCoordinates:!1,alternateCoordinates:!1,showCorner:!1,showDimmedStones:!1,fuzzyStonePlacement:!1,animateStonePlacement:!1,showPaintMap:!1,showHeatMap:!1,showMarkerMap:!1,showGhostStones:!1,showLines:!1,showSelection:!1,isBusy:!1}}render(){let{vertexSize:t,showCoordinates:n,alternateCoordinates:s,showCorner:r,showDimmedStones:i,fuzzyStonePlacement:l,animateStonePlacement:a,showPaintMap:h,showHeatMap:u,showMarkerMap:p,showGhostStones:d,showLines:_,showSelection:c}=this.state;return e("section",{style:{display:"grid",gridTemplateColumns:"15em auto",gridColumnGap:"1em"}},e("div",{},e(o,{innerProps:{onContextMenu:e=>e.preventDefault()},vertexSize:t,animate:!0,busy:this.state.isBusy,rangeX:r?[8,18]:void 0,rangeY:r?[12,18]:void 0,coordX:s?e=>chineseCoord[e]:void 0,coordY:s?e=>e+1:void 0,signMap:this.state.board,showCoordinates:n,fuzzyStonePlacement:l,animateStonePlacement:a,paintMap:h&&paintMap,heatMap:u&&heatMap,markerMap:p&&markerMap,ghostStoneMap:d&&ghostStoneMap,onVertexMouseUp:(e,[t,n])=>{e.button}})))}}),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,