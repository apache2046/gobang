/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={651:(e,t,n)=>{const{createElement:r,Component:o}=n(400),s=n(215);e.exports=class extends o{constructor(e){super(e),this.state={vertexSize:1,visibility:"hidden"}}componentDidMount(){this.componentDidUpdate()}componentDidUpdate(e){let{showCoordinates:t,maxWidth:n,maxHeight:r,maxVertexSize:o,rangeX:s,rangeY:i,signMap:a,onResized:l=(()=>{})}=this.props;if("visible"!==this.state.visibility||t!==e.showCoordinates||n!==e.maxWidth||r!==e.maxHeight||o!==e.maxVertexSize||JSON.stringify(s)!==JSON.stringify(e.rangeX)||JSON.stringify(i)!==JSON.stringify(e.rangeY)||a.length!==e.signMap.length||(a[0]||[]).length!==(e.signMap[0]||[]).length){let{offsetWidth:e,offsetHeight:t}=this.element,o=Math.min(n/e,r/t),s=Math.max(Math.floor(this.state.vertexSize*o),1);this.state.vertexSize!==s&&this.setState({vertexSize:s},l),"visible"!==this.state.visibility&&this.setState({visibility:"visible"})}}render(){let{innerProps:e={},style:t={},maxVertexSize:n=1/0}=this.props,{ref:o=(()=>{})}=e;return r(s,Object.assign({},this.props,{innerProps:Object.assign({},e,{ref:e=>(o(e),this.element=e)}),style:Object.assign({visibility:this.state.visibility},t),vertexSize:Math.min(this.state.vertexSize,n)}))}}},856:(e,t,n)=>{const{createElement:r,Component:o}=n(400),{alpha:s}=n(881);e.exports={CoordX:class extends o{render(){let{style:e,xs:t,coordX:n=(e=>s[e]||s[s.length-1])}=this.props;return r("div",{className:"shudan-coordx",style:Object.assign({display:"flex",textAlign:"center"},e)},t.map((e=>r("div",{key:e,style:{width:"1em"}},r("span",{style:{display:"block"}},n(e))))))}},CoordY:class extends o{render(){let{style:e,height:t,ys:n,coordY:o=(e=>t-e)}=this.props;return r("div",{className:"shudan-coordy",style:Object.assign({textAlign:"center"},e)},n.map((e=>r("div",{key:e,style:{height:"1em"}},r("span",{style:{display:"block"}},o(e))))))}}}},215:(e,t,n)=>{const{createElement:r,Component:o}=n(400),s=n(184),i=n(881),{CoordX:a,CoordY:l}=n(856),u=n(232),c=n(577),p=n(401);class h extends o{constructor(e){super(e),this.state={}}componentDidUpdate(){if(this.props.animateStonePlacement&&!this.state.clearAnimatedVerticesHandler&&this.state.animatedVertices.length>0){for(let[e,t]of this.state.animatedVertices)this.state.shiftMap[t][e]=i.random(7)+1,i.readjustShifts(this.state.shiftMap,[e,t]);this.setState({shiftMap:this.state.shiftMap}),this.setState({clearAnimatedVerticesHandler:setTimeout((()=>{this.setState({animatedVertices:[],clearAnimatedVerticesHandler:null})}),this.props.animationDuration||200)})}}render(){let{width:e,height:t,rangeX:n,rangeY:o,xs:h,ys:f,hoshis:d,shiftMap:_,randomMap:m}=this.state,{innerProps:v={},vertexSize:y=24,coordX:g,coordY:b,busy:x,signMap:E,paintMap:w,heatMap:S,markerMap:C,ghostStoneMap:O,fuzzyStonePlacement:k=!1,showCoordinates:R=!1,lines:A=[],selectedVertices:N=[],dimmedVertices:P=[]}=this.props,M=[].concat(...this.state.animatedVertices.map(i.neighborhood));return r("div",Object.assign({},v,{id:this.props.id,className:s("shudan-goban","shudan-goban-image",{"shudan-busy":x,"shudan-coordinates":R})+" "+(this.props.class||this.props.className||""),style:Object.assign({display:"inline-grid",gridTemplateRows:R?"1em 1fr 1em":"1fr",gridTemplateColumns:R?"1em 1fr 1em":"1fr",fontSize:y,lineHeight:"1em"},this.props.style||{})}),R&&r(a,{xs:h,style:{gridRow:"1",gridColumn:"2"},coordX:g}),R&&r(l,{height:t,ys:f,style:{gridRow:"2",gridColumn:"1"},coordY:b}),r("div",{className:"shudan-content",style:{position:"relative",width:`${h.length}em`,height:`${f.length}em`,gridRow:R?"2":"1",gridColumn:R?"2":"1"}},r(u,{vertexSize:y,width:e,height:t,xs:h,ys:f,hoshis:d}),r("div",{className:"shudan-vertices",style:{display:"grid",gridTemplateColumns:`repeat(${h.length}, 1em)`,gridTemplateRows:`repeat(${f.length}, 1em)`,position:"absolute",top:0,left:0,right:0,bottom:0,zIndex:1}},f.map((e=>h.map((t=>{let n=n=>i.vertexEquals(n,[t,e]),o=N.some(n);return r(c,Object.assign({key:[t,e].join("-"),position:[t,e],shift:k?_&&_[e]&&_[e][t]:0,random:m&&m[e]&&m[e][t],sign:E&&E[e]&&E[e][t],heat:S&&S[e]&&S[e][t],paint:w&&w[e]&&w[e][t],marker:C&&C[e]&&C[e][t],ghostStone:O&&O[e]&&O[e][t],dimmed:P.some(n),animate:M.some(n),selected:o,selectedLeft:o&&N.some((n=>i.vertexEquals(n,[t-1,e]))),selectedRight:o&&N.some((n=>i.vertexEquals(n,[t+1,e]))),selectedTop:o&&N.some((n=>i.vertexEquals(n,[t,e-1]))),selectedBottom:o&&N.some((n=>i.vertexEquals(n,[t,e+1])))},...i.vertexEvents.map((e=>({[`on${e}`]:this.props[`onVertex${e}`]})))))}))))),r("div",{className:"shudan-lines",style:{position:"absolute",top:0,left:0,right:0,bottom:0,overflow:"hidden",pointerEvents:"none",zIndex:2}},r("div",{style:{position:"absolute",top:`-${o[0]}em`,left:`-${n[0]}em`,width:`${e}em`,height:`${t}em`}},A.map((({v1:e,v2:t,type:n},o)=>r(p,{key:o,v1:e,v2:t,type:n,vertexSize:y})))))),R&&r(l,{height:t,ys:f,style:{gridRow:"2",gridColumn:"3"},coordY:b}),R&&r(a,{xs:h,style:{gridRow:"3",gridColumn:"2"},coordX:g}))}}h.getDerivedStateFromProps=function(e,t){let{signMap:n=[],rangeX:r=[0,1/0],rangeY:o=[0,1/0]}=e,s=0===n.length?0:n[0].length,a=n.length;if(t.width===s&&t.height===a){let l=t.animatedVertices;e.animateStonePlacement&&e.fuzzyStonePlacement&&null==t.clearAnimatedVerticesHandler&&(l=i.diffSignMap(t.signMap,n));let u={signMap:n,animatedVertices:l};return i.vertexEquals(t.rangeX,r)&&i.vertexEquals(t.rangeY,o)||Object.assign(u,{rangeX:r,rangeY:o,xs:i.range(s).slice(r[0],r[1]+1),ys:i.range(a).slice(o[0],o[1]+1)}),u}return{signMap:n,width:s,height:a,rangeX:r,rangeY:o,animatedVertices:[],clearAnimatedVerticesHandler:null,xs:i.range(s).slice(r[0],r[1]+1),ys:i.range(a).slice(o[0],o[1]+1),hoshis:i.getHoshis(s,a),shiftMap:i.readjustShifts(n.map((e=>e.map((e=>i.random(8)))))),randomMap:n.map((e=>e.map((e=>i.random(4)))))}},e.exports=h},232:(e,t,n)=>{const{createElement:r,Component:o}=n(400);e.exports=class extends o{shouldComponentUpdate(e){return e.vertexSize!==this.props.vertexSize||e.width!==this.props.width||e.height!==this.props.height||e.xs.length!==this.props.xs.length||e.ys.length!==this.props.ys.length||e.xs[0]!==this.props.xs[0]||e.ys[0]!==this.props.ys[0]}render(){let{vertexSize:e,width:t,height:n,xs:o,ys:s,hoshis:i}=this.props,a=e/2,l=Math.floor;return o.length>0&&s.length>0&&r("svg",{className:"shudan-grid",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%",zIndex:0}},s.map(((n,s)=>{let i=0===o[0]?a:0;return r("rect",{key:`h${s}`,className:"shudan-gridline shudan-horizontal",x:l(i),y:l((2*s+1)*a),width:o[o.length-1]===t-1?l((2*o.length-1)*a-i):l(o.length*e-i),height:1})})),o.map(((t,o)=>{let i=0===s[0]?a:0;return r("rect",{key:`v${o}`,className:"shudan-gridline shudan-vertical",x:l((2*o+1)*a),y:l(i),width:1,height:s[s.length-1]===n-1?l((2*s.length-1)*a-i):l(s.length*e-i)})})),i.map((([e,t])=>{let n=o.indexOf(e),i=s.indexOf(t);if(!(n<0||i<0))return r("circle",{key:[e,t].join("-"),className:"shudan-hoshi",cx:l((2*n+1)*a)+.5,cy:l((2*i+1)*a)+.5,r:".1em"})})))}}},401:(e,t,n)=>{const{createElement:r,Component:o}=n(400),{vertexEquals:s}=n(881);e.exports=class extends o{shouldComponentUpdate(e){let{v1:t,v2:n,type:r,vertexSize:o}=this.props;return r!==e.type||o!==e.vertexSize||!s(t,e.v1)||!s(n,e.v2)}render(){let{v1:e,v2:t,type:n="line",vertexSize:o}=this.props;if(s(e,t))return;let[i,a]=[e,t].map((e=>e.map((e=>e*o)))),[l,u]=i.map(((e,t)=>a[t]-e)),[c,p]=i.map(((e,t)=>(e+a[t]+o)/2)),h=180*Math.atan2(u,l)/Math.PI,f=Math.sqrt(l*l+u*u);return r("div",{className:`shudan-${n}`,style:{position:"absolute",left:c,top:p,margin:0,width:f,transform:`translateX(${-f/2}px) rotate(${h}deg)`}})}}},577:(e,t,n)=>{const{createElement:r,Component:o}=n(400),s=n(184),{vertexEvents:i}=n(881),a=e=>({position:"absolute",zIndex:e});e.exports=class extends o{constructor(e){super(e);for(let e of i)this[`handle${e}`]=t=>{(this.props[`on${e}`]||(()=>{}))(t,this.props.position)}}shouldComponentUpdate(e){return this.props.shift!==e.shift||this.props.random!==e.random||this.props.sign!==e.sign||this.props.selected!==e.selected||this.props.heat!==e.heat||this.props.paint!==e.paint||this.props.dimmed!==e.dimmed||this.props.marker!==e.marker||this.props.ghostStone!==e.ghostStone||this.props.animate!==e.animate}render(){let{position:e,shift:t,random:n,sign:o,heat:l,paint:u,dimmed:c,marker:p,ghostStone:h,animate:f,selected:d,selectedLeft:_,selectedRight:m,selectedTop:v,selectedBottom:y}=this.props,g=e=>!!p&&r("div",{key:"marker",className:"shudan-marker",title:p.label,style:a(e)});return r("div",Object.assign({"data-x":e[0],"data-y":e[1],style:{position:"relative"},className:s("shudan-vertex",`shudan-random_${n}`,`shudan-sign_${o}`,{[`shudan-shift_${t}`]:!!t,[`shudan-heat_${!!l&&l.strength}`]:!!l,["shudan-paint_"+(u>0?1:-1)]:!!u,"shudan-dimmed":c,"shudan-selected":d,"shudan-selectedleft":_,"shudan-selectedright":m,"shudan-selectedtop":v,"shudan-selectedbottom":y,"shudan-animate":f},p&&p.type&&`shudan-marker_${p.type}`,p&&"label"===p.type&&p.label&&(p.label.includes("\n")||p.label.length>=3)&&"shudan-smalllabel",h&&`shudan-ghost_${h.sign}`,h&&h.type&&`shudan-ghost_${h.type}`,h&&h.faint&&"shudan-ghost_faint")},...i.map((e=>({[`on${e}`]:this[`handle${e}`]})))),!o&&g(0),!o&&!!h&&r("div",{key:"ghost",className:"shudan-ghost",style:a(1)}),r("div",{key:"stone",className:"shudan-stone",style:a(2)},!!o&&r("div",{key:"shadow",className:"shudan-shadow",style:a()}),!!o&&r("div",{key:"inner",className:s("shudan-inner","shudan-stone-image",`shudan-random_${n}`,`shudan-sign_${o}`),style:a()},o),!!o&&g()),!!u&&r("div",{key:"paint",className:"shudan-paint",style:{...a(3),opacity:.5*Math.abs(u||0)}}),!!d&&r("div",{key:"selection",className:"shudan-selection",style:a(4)}),r("div",{key:"heat",className:"shudan-heat",style:a(5)}),!!l&&r("div",{key:"heatlabel",className:"shudan-heatlabel",style:a(6)},l.text&&l.text.toString()))}}},881:(e,t)=>{t.alpha="ABCDEFGHJKLMNOPQRSTUVWXYZ",t.vertexEvents=["Click","MouseDown","MouseUp","MouseMove","MouseEnter","MouseLeave","PointerDown","PointerUp","PointerMove","PointerEnter","PointerLeave"],t.range=e=>Array(e).fill(0).map(((e,t)=>t)),t.random=e=>Math.floor(Math.random()*(e+1)),t.neighborhood=([e,t])=>[[e,t],[e-1,t],[e+1,t],[e,t-1],[e,t+1]],t.vertexEquals=([e,t],[n,r])=>e===n&&t===r,t.lineEquals=([e,n],[r,o])=>t.vertexEquals(e,r)&&t.vertexEquals(n,o),t.getHoshis=function(e,t){if(Math.min(e,t)<=6)return[];let[n,r]=[e,t].map((e=>e>=13?3:2)),[o,s]=[e-n-1,t-r-1],[i,a]=[e,t].map((e=>(e-1)/2)),l=[[n,s],[o,r],[o,s],[n,r]];return e%2!=0&&t%2!=0&&7!==e&&7!==t&&l.push([i,a]),e%2!=0&&7!==e&&l.push([i,r],[i,s]),t%2!=0&&7!==t&&l.push([n,a],[o,a]),l},t.readjustShifts=function(e,n=null){if(null==n)for(let n=0;n<e.length;n++)for(let r=0;r<e[0].length;r++)t.readjustShifts(e,[r,n]);else{let[t,r]=n,o=e[r][t],s=[[[1,5,8],[t-1,r],[3,7,6]],[[2,5,6],[t,r-1],[4,7,8]],[[3,7,6],[t+1,r],[1,5,8]],[[4,7,8],[t,r+1],[2,5,6]]];for(let[t,[n,r],i]of s)t.includes(o)&&e[r]&&i.includes(e[r][n])&&(e[r][n]=0)}return e},t.diffSignMap=function(e,t){if(e===t||0===e.length||e.length!==t.length||e[0].length!==t[0].length)return[];let n=[];for(let r=0;r<e.length;r++)for(let o=0;o<e[0].length;o++)0===e[r][o]&&null!=t[r]&&t[r][o]&&n.push([o,r]);return n}},28:(e,t,n)=>{const r=n(215),o=n(651);e.exports={Goban:r,BoundedGoban:o}},669:(e,t,n)=>{e.exports=n(609)},448:(e,t,n)=>{"use strict";var r=n(867),o=n(26),s=n(372),i=n(327),a=n(97),l=n(109),u=n(985),c=n(874),p=n(648),h=n(644),f=n(205);e.exports=function(e){return new Promise((function(t,n){var d,_=e.data,m=e.headers,v=e.responseType;function y(){e.cancelToken&&e.cancelToken.unsubscribe(d),e.signal&&e.signal.removeEventListener("abort",d)}r.isFormData(_)&&r.isStandardBrowserEnv()&&delete m["Content-Type"];var g=new XMLHttpRequest;if(e.auth){var b=e.auth.username||"",x=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";m.Authorization="Basic "+btoa(b+":"+x)}var E=a(e.baseURL,e.url);function w(){if(g){var r="getAllResponseHeaders"in g?l(g.getAllResponseHeaders()):null,s={data:v&&"text"!==v&&"json"!==v?g.response:g.responseText,status:g.status,statusText:g.statusText,headers:r,config:e,request:g};o((function(e){t(e),y()}),(function(e){n(e),y()}),s),g=null}}if(g.open(e.method.toUpperCase(),i(E,e.params,e.paramsSerializer),!0),g.timeout=e.timeout,"onloadend"in g?g.onloadend=w:g.onreadystatechange=function(){g&&4===g.readyState&&(0!==g.status||g.responseURL&&0===g.responseURL.indexOf("file:"))&&setTimeout(w)},g.onabort=function(){g&&(n(new p("Request aborted",p.ECONNABORTED,e,g)),g=null)},g.onerror=function(){n(new p("Network Error",p.ERR_NETWORK,e,g,g)),g=null},g.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||c;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new p(t,r.clarifyTimeoutError?p.ETIMEDOUT:p.ECONNABORTED,e,g)),g=null},r.isStandardBrowserEnv()){var S=(e.withCredentials||u(E))&&e.xsrfCookieName?s.read(e.xsrfCookieName):void 0;S&&(m[e.xsrfHeaderName]=S)}"setRequestHeader"in g&&r.forEach(m,(function(e,t){void 0===_&&"content-type"===t.toLowerCase()?delete m[t]:g.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(g.withCredentials=!!e.withCredentials),v&&"json"!==v&&(g.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&g.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&g.upload&&g.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(d=function(e){g&&(n(!e||e&&e.type?new h:e),g.abort(),g=null)},e.cancelToken&&e.cancelToken.subscribe(d),e.signal&&(e.signal.aborted?d():e.signal.addEventListener("abort",d))),_||(_=null);var C=f(E);C&&-1===["http","https","file"].indexOf(C)?n(new p("Unsupported protocol "+C+":",p.ERR_BAD_REQUEST,e)):g.send(_)}))}},609:(e,t,n)=>{"use strict";var r=n(867),o=n(849),s=n(321),i=n(185),a=function e(t){var n=new s(t),a=o(s.prototype.request,n);return r.extend(a,s.prototype,n),r.extend(a,n),a.create=function(n){return e(i(t,n))},a}(n(546));a.Axios=s,a.CanceledError=n(644),a.CancelToken=n(972),a.isCancel=n(502),a.VERSION=n(288).version,a.toFormData=n(675),a.AxiosError=n(648),a.Cancel=a.CanceledError,a.all=function(e){return Promise.all(e)},a.spread=n(713),a.isAxiosError=n(268),e.exports=a,e.exports.default=a},972:(e,t,n)=>{"use strict";var r=n(644);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},644:(e,t,n)=>{"use strict";var r=n(648);function o(e){r.call(this,null==e?"canceled":e,r.ERR_CANCELED),this.name="CanceledError"}n(867).inherits(o,r,{__CANCEL__:!0}),e.exports=o},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(867),o=n(327),s=n(782),i=n(572),a=n(185),l=n(97),u=n(875),c=u.validators;function p(e){this.defaults=e,this.interceptors={request:new s,response:new s}}p.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&u.assertOptions(n,{silentJSONParsing:c.transitional(c.boolean),forcedJSONParsing:c.transitional(c.boolean),clarifyTimeoutError:c.transitional(c.boolean)},!1);var r=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var s,l=[];if(this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)})),!o){var p=[i,void 0];for(Array.prototype.unshift.apply(p,r),p=p.concat(l),s=Promise.resolve(t);p.length;)s=s.then(p.shift(),p.shift());return s}for(var h=t;r.length;){var f=r.shift(),d=r.shift();try{h=f(h)}catch(e){d(e);break}}try{s=i(h)}catch(e){return Promise.reject(e)}for(;l.length;)s=s.then(l.shift(),l.shift());return s},p.prototype.getUri=function(e){e=a(this.defaults,e);var t=l(e.baseURL,e.url);return o(t,e.params,e.paramsSerializer)},r.forEach(["delete","get","head","options"],(function(e){p.prototype[e]=function(t,n){return this.request(a(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(a(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}p.prototype[e]=t(),p.prototype[e+"Form"]=t(!0)})),e.exports=p},648:(e,t,n)=>{"use strict";var r=n(867);function o(e,t,n,r,o){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}r.inherits(o,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var s=o.prototype,i={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){i[e]={value:e}})),Object.defineProperties(o,i),Object.defineProperty(s,"isAxiosError",{value:!0}),o.from=function(e,t,n,i,a,l){var u=Object.create(s);return r.toFlatObject(e,u,(function(e){return e!==Error.prototype})),o.call(u,e.message,t,n,i,a),u.name=e.name,l&&Object.assign(u,l),u},e.exports=o},782:(e,t,n)=>{"use strict";var r=n(867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},97:(e,t,n)=>{"use strict";var r=n(793),o=n(303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},572:(e,t,n)=>{"use strict";var r=n(867),o=n(527),s=n(502),i=n(546),a=n(644);function l(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new a}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return l(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return s(t)||(l(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},185:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){t=t||{};var n={};function o(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function s(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(e[n],t[n])}function i(e){if(!r.isUndefined(t[e]))return o(void 0,t[e])}function a(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(void 0,t[n])}function l(n){return n in t?o(e[n],t[n]):n in e?o(void 0,e[n]):void 0}var u={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:l};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||s,o=t(e);r.isUndefined(o)&&t!==l||(n[e]=o)})),n}},26:(e,t,n)=>{"use strict";var r=n(648);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(new r("Request failed with status code "+n.status,[r.ERR_BAD_REQUEST,r.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}},527:(e,t,n)=>{"use strict";var r=n(867),o=n(546);e.exports=function(e,t,n){var s=this||o;return r.forEach(n,(function(n){e=n.call(s,e,t)})),e}},546:(e,t,n)=>{"use strict";var r=n(867),o=n(16),s=n(648),i=n(874),a=n(675),l={"Content-Type":"application/x-www-form-urlencoded"};function u(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var c,p={transitional:i,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(c=n(448)),c),transformRequest:[function(e,t){if(o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e))return e;if(r.isArrayBufferView(e))return e.buffer;if(r.isURLSearchParams(e))return u(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var n,s=r.isObject(e),i=t&&t["Content-Type"];if((n=r.isFileList(e))||s&&"multipart/form-data"===i){var l=this.env&&this.env.FormData;return a(n?{"files[]":e}:e,l&&new l)}return s||"application/json"===i?(u(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||p.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,i=!n&&"json"===this.responseType;if(i||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw s.from(e,s.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:n(623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){p.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){p.headers[e]=r.merge(l)})),e.exports=p},874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},288:e=>{e.exports={version:"0.27.2"}},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},327:(e,t,n)=>{"use strict";var r=n(867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var s;if(n)s=n(t);else if(r.isURLSearchParams(t))s=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),s=i.join("&")}if(s){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+s}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,s,i){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(s)&&a.push("domain="+s),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},268:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},985:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},16:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},623:e=>{e.exports=null},109:(e,t,n)=>{"use strict";var r=n(867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,s,i={};return e?(r.forEach(e.split("\n"),(function(e){if(s=e.indexOf(":"),t=r.trim(e.substr(0,s)).toLowerCase(),n=r.trim(e.substr(s+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},205:e=>{"use strict";e.exports=function(e){var t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},675:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){t=t||new FormData;var n=[];function o(e){return null===e?"":r.isDate(e)?e.toISOString():r.isArrayBuffer(e)||r.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(s,i){if(r.isPlainObject(s)||r.isArray(s)){if(-1!==n.indexOf(s))throw Error("Circular reference detected in "+i);n.push(s),r.forEach(s,(function(n,s){if(!r.isUndefined(n)){var a,l=i?i+"."+s:s;if(n&&!i&&"object"==typeof n)if(r.endsWith(s,"{}"))n=JSON.stringify(n);else if(r.endsWith(s,"[]")&&(a=r.toArray(n)))return void a.forEach((function(e){!r.isUndefined(e)&&t.append(l,o(e))}));e(n,l)}})),n.pop()}else t.append(i,o(s))}(e),t}},875:(e,t,n)=>{"use strict";var r=n(288).version,o=n(648),s={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){s[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var i={};s.transitional=function(e,t,n){function s(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,a){if(!1===e)throw new o(s(r," has been removed"+(t?" in "+t:"")),o.ERR_DEPRECATED);return t&&!i[r]&&(i[r]=!0,console.warn(s(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,a)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new o("options must be an object",o.ERR_BAD_OPTION_VALUE);for(var r=Object.keys(e),s=r.length;s-- >0;){var i=r[s],a=t[i];if(a){var l=e[i],u=void 0===l||a(l,i,e);if(!0!==u)throw new o("option "+i+" must be "+u,o.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new o("Unknown option "+i,o.ERR_BAD_OPTION)}},validators:s}},867:(e,t,n)=>{"use strict";var r,o=n(849),s=Object.prototype.toString,i=(r=Object.create(null),function(e){var t=s.call(e);return r[t]||(r[t]=t.slice(8,-1).toLowerCase())});function a(e){return e=e.toLowerCase(),function(t){return i(t)===e}}function l(e){return Array.isArray(e)}function u(e){return void 0===e}var c=a("ArrayBuffer");function p(e){return null!==e&&"object"==typeof e}function h(e){if("object"!==i(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var f=a("Date"),d=a("File"),_=a("Blob"),m=a("FileList");function v(e){return"[object Function]"===s.call(e)}var y=a("URLSearchParams");function g(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),l(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}var b,x=(b="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return b&&e instanceof b});e.exports={isArray:l,isArrayBuffer:c,isBuffer:function(e){return null!==e&&!u(e)&&null!==e.constructor&&!u(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||s.call(e)===t||v(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&c(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:p,isPlainObject:h,isUndefined:u,isDate:f,isFile:d,isBlob:_,isFunction:v,isStream:function(e){return p(e)&&v(e.pipe)},isURLSearchParams:y,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:g,merge:function e(){var t={};function n(n,r){h(t[r])&&h(n)?t[r]=e(t[r],n):h(n)?t[r]=e({},n):l(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)g(arguments[r],n);return t},extend:function(e,t,n){return g(t,(function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,n,r){e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,n&&Object.assign(e.prototype,n)},toFlatObject:function(e,t,n){var r,o,s,i={};t=t||{};do{for(o=(r=Object.getOwnPropertyNames(e)).length;o-- >0;)i[s=r[o]]||(t[s]=e[s],i[s]=!0);e=Object.getPrototypeOf(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:i,kindOfTest:a,endsWith:function(e,t,n){e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;var r=e.indexOf(t,n);return-1!==r&&r===n},toArray:function(e){if(!e)return null;var t=e.length;if(u(t))return null;for(var n=new Array(t);t-- >0;)n[t]=e[t];return n},isTypedArray:x,isFileList:m}},184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var s=typeof n;if("string"===s||"number"===s)e.push(n);else if(Array.isArray(n)){if(n.length){var i=o.apply(null,n);i&&e.push(i)}}else if("object"===s)if(n.toString===Object.prototype.toString)for(var a in n)r.call(n,a)&&n[a]&&e.push(a);else e.push(n.toString())}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},400:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Component:()=>b,Fragment:()=>g,cloneElement:()=>F,createContext:()=>q,createElement:()=>m,createRef:()=>y,h:()=>m,hydrate:()=>z,isValidElement:()=>i,options:()=>o,render:()=>H,toChildArray:()=>k});var r,o,s,i,a,l,u,c,p={},h=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function d(e,t){for(var n in t)e[n]=t[n];return e}function _(e){var t=e.parentNode;t&&t.removeChild(e)}function m(e,t,n){var o,s,i,a={};for(i in t)"key"==i?o=t[i]:"ref"==i?s=t[i]:a[i]=t[i];if(arguments.length>2&&(a.children=arguments.length>3?r.call(arguments,2):n),"function"==typeof e&&null!=e.defaultProps)for(i in e.defaultProps)void 0===a[i]&&(a[i]=e.defaultProps[i]);return v(e,a,o,s,null)}function v(e,t,n,r,i){var a={type:e,props:t,key:n,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==i?++s:i};return null==i&&null!=o.vnode&&o.vnode(a),a}function y(){return{current:null}}function g(e){return e.children}function b(e,t){this.props=e,this.context=t}function x(e,t){if(null==t)return e.__?x(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?x(e):null}function E(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return E(e)}}function w(e){(!e.__d&&(e.__d=!0)&&a.push(e)&&!S.__r++||u!==o.debounceRendering)&&((u=o.debounceRendering)||l)(S)}function S(){for(var e;S.__r=a.length;)e=a.sort((function(e,t){return e.__v.__b-t.__v.__b})),a=[],e.some((function(e){var t,n,r,o,s,i;e.__d&&(s=(o=(t=e).__v).__e,(i=t.__P)&&(n=[],(r=d({},o)).__v=o.__v+1,T(i,o,r,t.__n,void 0!==i.ownerSVGElement,null!=o.__h?[s]:null,n,null==s?x(o):s,o.__h),j(n,o),o.__e!=s&&E(o)))}))}function C(e,t,n,r,o,s,i,a,l,u){var c,f,d,_,m,y,b,E=r&&r.__k||h,w=E.length;for(n.__k=[],c=0;c<t.length;c++)if(null!=(_=n.__k[c]=null==(_=t[c])||"boolean"==typeof _?null:"string"==typeof _||"number"==typeof _||"bigint"==typeof _?v(null,_,null,null,_):Array.isArray(_)?v(g,{children:_},null,null,null):_.__b>0?v(_.type,_.props,_.key,null,_.__v):_)){if(_.__=n,_.__b=n.__b+1,null===(d=E[c])||d&&_.key==d.key&&_.type===d.type)E[c]=void 0;else for(f=0;f<w;f++){if((d=E[f])&&_.key==d.key&&_.type===d.type){E[f]=void 0;break}d=null}T(e,_,d=d||p,o,s,i,a,l,u),m=_.__e,(f=_.ref)&&d.ref!=f&&(b||(b=[]),d.ref&&b.push(d.ref,null,_),b.push(f,_.__c||m,_)),null!=m?(null==y&&(y=m),"function"==typeof _.type&&_.__k===d.__k?_.__d=l=O(_,l,e):l=R(e,_,d,E,m,l),"function"==typeof n.type&&(n.__d=l)):l&&d.__e==l&&l.parentNode!=e&&(l=x(d))}for(n.__e=y,c=w;c--;)null!=E[c]&&("function"==typeof n.type&&null!=E[c].__e&&E[c].__e==n.__d&&(n.__d=x(r,c+1)),B(E[c],E[c]));if(b)for(c=0;c<b.length;c++)U(b[c],b[++c],b[++c])}function O(e,t,n){for(var r,o=e.__k,s=0;o&&s<o.length;s++)(r=o[s])&&(r.__=e,t="function"==typeof r.type?O(r,t,n):R(n,r,r,o,r.__e,t));return t}function k(e,t){return t=t||[],null==e||"boolean"==typeof e||(Array.isArray(e)?e.some((function(e){k(e,t)})):t.push(e)),t}function R(e,t,n,r,o,s){var i,a,l;if(void 0!==t.__d)i=t.__d,t.__d=void 0;else if(null==n||o!=s||null==o.parentNode)e:if(null==s||s.parentNode!==e)e.appendChild(o),i=null;else{for(a=s,l=0;(a=a.nextSibling)&&l<r.length;l+=2)if(a==o)break e;e.insertBefore(o,s),i=s}return void 0!==i?i:o.nextSibling}function A(e,t,n){"-"===t[0]?e.setProperty(t,n):e[t]=null==n?"":"number"!=typeof n||f.test(t)?n:n+"px"}function N(e,t,n,r,o){var s;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||A(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||A(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])s=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+s]=n,n?r||e.addEventListener(t,s?M:P,s):e.removeEventListener(t,s?M:P,s);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null!=n&&(!1!==n||"a"===t[0]&&"r"===t[1])?e.setAttribute(t,n):e.removeAttribute(t))}}function P(e){this.l[e.type+!1](o.event?o.event(e):e)}function M(e){this.l[e.type+!0](o.event?o.event(e):e)}function T(e,t,n,r,s,i,a,l,u){var c,p,h,f,_,m,v,y,x,E,w,S=t.type;if(void 0!==t.constructor)return null;null!=n.__h&&(u=n.__h,l=t.__e=n.__e,t.__h=null,i=[l]),(c=o.__b)&&c(t);try{e:if("function"==typeof S){if(y=t.props,x=(c=S.contextType)&&r[c.__c],E=c?x?x.props.value:c.__:r,n.__c?v=(p=t.__c=n.__c).__=p.__E:("prototype"in S&&S.prototype.render?t.__c=p=new S(y,E):(t.__c=p=new b(y,E),p.constructor=S,p.render=L),x&&x.sub(p),p.props=y,p.state||(p.state={}),p.context=E,p.__n=r,h=p.__d=!0,p.__h=[]),null==p.__s&&(p.__s=p.state),null!=S.getDerivedStateFromProps&&(p.__s==p.state&&(p.__s=d({},p.__s)),d(p.__s,S.getDerivedStateFromProps(y,p.__s))),f=p.props,_=p.state,h)null==S.getDerivedStateFromProps&&null!=p.componentWillMount&&p.componentWillMount(),null!=p.componentDidMount&&p.__h.push(p.componentDidMount);else{if(null==S.getDerivedStateFromProps&&y!==f&&null!=p.componentWillReceiveProps&&p.componentWillReceiveProps(y,E),!p.__e&&null!=p.shouldComponentUpdate&&!1===p.shouldComponentUpdate(y,p.__s,E)||t.__v===n.__v){p.props=y,p.state=p.__s,t.__v!==n.__v&&(p.__d=!1),p.__v=t,t.__e=n.__e,t.__k=n.__k,t.__k.forEach((function(e){e&&(e.__=t)})),p.__h.length&&a.push(p);break e}null!=p.componentWillUpdate&&p.componentWillUpdate(y,p.__s,E),null!=p.componentDidUpdate&&p.__h.push((function(){p.componentDidUpdate(f,_,m)}))}p.context=E,p.props=y,p.state=p.__s,(c=o.__r)&&c(t),p.__d=!1,p.__v=t,p.__P=e,c=p.render(p.props,p.state,p.context),p.state=p.__s,null!=p.getChildContext&&(r=d(d({},r),p.getChildContext())),h||null==p.getSnapshotBeforeUpdate||(m=p.getSnapshotBeforeUpdate(f,_)),w=null!=c&&c.type===g&&null==c.key?c.props.children:c,C(e,Array.isArray(w)?w:[w],t,n,r,s,i,a,l,u),p.base=t.__e,t.__h=null,p.__h.length&&a.push(p),v&&(p.__E=p.__=null),p.__e=!1}else null==i&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=D(n.__e,t,n,r,s,i,a,u);(c=o.diffed)&&c(t)}catch(e){t.__v=null,(u||null!=i)&&(t.__e=l,t.__h=!!u,i[i.indexOf(l)]=null),o.__e(e,t,n)}}function j(e,t){o.__c&&o.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){o.__e(e,t.__v)}}))}function D(e,t,n,o,s,i,a,l){var u,c,h,f=n.props,d=t.props,m=t.type,v=0;if("svg"===m&&(s=!0),null!=i)for(;v<i.length;v++)if((u=i[v])&&"setAttribute"in u==!!m&&(m?u.localName===m:3===u.nodeType)){e=u,i[v]=null;break}if(null==e){if(null===m)return document.createTextNode(d);e=s?document.createElementNS("http://www.w3.org/2000/svg",m):document.createElement(m,d.is&&d),i=null,l=!1}if(null===m)f===d||l&&e.data===d||(e.data=d);else{if(i=i&&r.call(e.childNodes),c=(f=n.props||p).dangerouslySetInnerHTML,h=d.dangerouslySetInnerHTML,!l){if(null!=i)for(f={},v=0;v<e.attributes.length;v++)f[e.attributes[v].name]=e.attributes[v].value;(h||c)&&(h&&(c&&h.__html==c.__html||h.__html===e.innerHTML)||(e.innerHTML=h&&h.__html||""))}if(function(e,t,n,r,o){var s;for(s in n)"children"===s||"key"===s||s in t||N(e,s,null,n[s],r);for(s in t)o&&"function"!=typeof t[s]||"children"===s||"key"===s||"value"===s||"checked"===s||n[s]===t[s]||N(e,s,t[s],n[s],r)}(e,d,f,s,l),h)t.__k=[];else if(v=t.props.children,C(e,Array.isArray(v)?v:[v],t,n,o,s&&"foreignObject"!==m,i,a,i?i[0]:n.__k&&x(n,0),l),null!=i)for(v=i.length;v--;)null!=i[v]&&_(i[v]);l||("value"in d&&void 0!==(v=d.value)&&(v!==e.value||"progress"===m&&!v||"option"===m&&v!==f.value)&&N(e,"value",v,f.value,!1),"checked"in d&&void 0!==(v=d.checked)&&v!==e.checked&&N(e,"checked",v,f.checked,!1))}return e}function U(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(e){o.__e(e,n)}}function B(e,t,n){var r,s;if(o.unmount&&o.unmount(e),(r=e.ref)&&(r.current&&r.current!==e.__e||U(r,null,t)),null!=(r=e.__c)){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(e){o.__e(e,t)}r.base=r.__P=null}if(r=e.__k)for(s=0;s<r.length;s++)r[s]&&B(r[s],t,"function"!=typeof e.type);n||null==e.__e||_(e.__e),e.__e=e.__d=void 0}function L(e,t,n){return this.constructor(e,n)}function H(e,t,n){var s,i,a;o.__&&o.__(e,t),i=(s="function"==typeof n)?null:n&&n.__k||t.__k,a=[],T(t,e=(!s&&n||t).__k=m(g,null,[e]),i||p,p,void 0!==t.ownerSVGElement,!s&&n?[n]:i?null:t.firstChild?r.call(t.childNodes):null,a,!s&&n?n:i?i.__e:t.firstChild,s),j(a,e)}function z(e,t){H(e,t,z)}function F(e,t,n){var o,s,i,a=d({},e.props);for(i in t)"key"==i?o=t[i]:"ref"==i?s=t[i]:a[i]=t[i];return arguments.length>2&&(a.children=arguments.length>3?r.call(arguments,2):n),v(e.type,a,o||e.key,s||e.ref,null)}function q(e,t){var n={__c:t="__cC"+c++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,r;return this.getChildContext||(n=[],(r={})[t]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some(w)},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n}r=h.slice,o={__e:function(e,t,n,r){for(var o,s,i;t=t.__;)if((o=t.__c)&&!o.__)try{if((s=o.constructor)&&null!=s.getDerivedStateFromError&&(o.setState(s.getDerivedStateFromError(e)),i=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),i=o.__d),i)return o.__E=o}catch(t){e=t}throw e}},s=0,i=function(e){return null!=e&&void 0===e.constructor},b.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=d({},this.state),"function"==typeof e&&(e=e(d({},n),this.props)),e&&d(n,e),null!=e&&this.__v&&(t&&this.__h.push(t),w(this))},b.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),w(this))},b.prototype.render=g,a=[],l="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,S.__r=0,c=0},396:(e,t,n)=>{"use strict";n.r(t),n.d(t,{useCallback:()=>E,useContext:()=>w,useDebugValue:()=>S,useEffect:()=>v,useErrorBoundary:()=>C,useImperativeHandle:()=>b,useLayoutEffect:()=>y,useMemo:()=>x,useReducer:()=>m,useRef:()=>g,useState:()=>_});var r,o,s,i=n(400),a=0,l=[],u=i.options.__b,c=i.options.__r,p=i.options.diffed,h=i.options.__c,f=i.options.unmount;function d(e,t){i.options.__h&&i.options.__h(o,e,a||t),a=0;var n=o.__H||(o.__H={__:[],__h:[]});return e>=n.__.length&&n.__.push({}),n.__[e]}function _(e){return a=1,m(P,e)}function m(e,t,n){var s=d(r++,2);return s.t=e,s.__c||(s.__=[n?n(t):P(void 0,t),function(e){var t=s.t(s.__[0],e);s.__[0]!==t&&(s.__=[t,s.__[1]],s.__c.setState({}))}],s.__c=o),s.__}function v(e,t){var n=d(r++,3);!i.options.__s&&N(n.__H,t)&&(n.__=e,n.__H=t,o.__H.__h.push(n))}function y(e,t){var n=d(r++,4);!i.options.__s&&N(n.__H,t)&&(n.__=e,n.__H=t,o.__h.push(n))}function g(e){return a=5,x((function(){return{current:e}}),[])}function b(e,t,n){a=6,y((function(){return"function"==typeof e?(e(t()),function(){return e(null)}):e?(e.current=t(),function(){return e.current=null}):void 0}),null==n?n:n.concat(e))}function x(e,t){var n=d(r++,7);return N(n.__H,t)&&(n.__=e(),n.__H=t,n.__h=e),n.__}function E(e,t){return a=8,x((function(){return e}),t)}function w(e){var t=o.context[e.__c],n=d(r++,9);return n.c=e,t?(null==n.__&&(n.__=!0,t.sub(o)),t.props.value):e.__}function S(e,t){i.options.useDebugValue&&i.options.useDebugValue(t?t(e):e)}function C(e){var t=d(r++,10),n=_();return t.__=e,o.componentDidCatch||(o.componentDidCatch=function(e){t.__&&t.__(e),n[1](e)}),[n[0],function(){n[1](void 0)}]}function O(){for(var e;e=l.shift();)if(e.__P)try{e.__H.__h.forEach(R),e.__H.__h.forEach(A),e.__H.__h=[]}catch(t){e.__H.__h=[],i.options.__e(t,e.__v)}}i.options.__b=function(e){o=null,u&&u(e)},i.options.__r=function(e){c&&c(e),r=0;var t=(o=e.__c).__H;t&&(t.__h.forEach(R),t.__h.forEach(A),t.__h=[])},i.options.diffed=function(e){p&&p(e);var t=e.__c;t&&t.__H&&t.__H.__h.length&&(1!==l.push(t)&&s===i.options.requestAnimationFrame||((s=i.options.requestAnimationFrame)||function(e){var t,n=function(){clearTimeout(r),k&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);k&&(t=requestAnimationFrame(n))})(O)),o=null},i.options.__c=function(e,t){t.some((function(e){try{e.__h.forEach(R),e.__h=e.__h.filter((function(e){return!e.__||A(e)}))}catch(n){t.some((function(e){e.__h&&(e.__h=[])})),t=[],i.options.__e(n,e.__v)}})),h&&h(e,t)},i.options.unmount=function(e){f&&f(e);var t,n=e.__c;n&&n.__H&&(n.__H.__.forEach((function(e){try{R(e)}catch(e){t=e}})),t&&i.options.__e(t,n.__v))};var k="function"==typeof requestAnimationFrame;function R(e){var t=o,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),o=t}function A(e){var t=o;e.__c=e.__(),o=t}function N(e,t){return!e||e.length!==t.length||t.some((function(t,n){return t!==e[n]}))}function P(e,t){return"function"==typeof t?t(e):t}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={exports:{}};return e[r](s,s.exports,n),s.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const{h:e,render:t,Component:r}=n(400),{useState:o,useEffect:s}=n(396),{Goban:i}=n(28),a=n(669).default;t(e(class extends r{constructor(e){super(e);let t=15,n=new Array(t);for(let e=0;e<t;e++)n[e]=new Array(t);let r=new Array(t);for(let e=0;e<t;e++){r[e]=new Array(t);for(let n=0;n<t;n++)r[e][n]=null}this.emptyMarkerMap=r,this.state={board:n,vertexSize:36,showCoordinates:!0,alternateCoordinates:!1,showCorner:!1,showDimmedStones:!1,fuzzyStonePlacement:!1,animateStonePlacement:!1,showPaintMap:!1,showHeatMap:!1,markerMap:r,showGhostStones:!1,showLines:!1,showSelection:!1,isBusy:!0,init:!1},this.audio_pachi=[];for(let e=0;e<4;e++)this.audio_pachi.push(new Audio(`/audio/${e}.mp3`))}async playSound(){let e=Math.floor(Math.random()*this.audio_pachi.length);this.audio_pachi[e].play()}async initBoard(){await a({method:"post",url:"/boardsize",data:{size:15}}),await a({method:"post",url:"/clearboard"}),this.setState({isBusy:!1,init:!0}),console.log("end axio")}async placeStone(e,t){let n=t[0],r=t[1];this.playSound();let o=this.state.board;o[r][n]=e;let s=structuredClone(this.emptyMarkerMap);s[r][n]={type:"point"},this.setState({board:o,markerMap:s})}async play(e,t){return await a({method:"post",url:"/play",data:{actor:e,pos:t}}),console.log("end play"),t}async genmove(e){const t=await a({method:"post",url:"/genmove",data:{actor:e}});return console.log("end genmove"),t.data.pos}render(){let{vertexSize:t,board:n,isBusy:r,showCoordinates:o,alternateCoordinates:s,showCorner:a,showDimmedStones:l,fuzzyStonePlacement:u,animateStonePlacement:c,showPaintMap:p,showHeatMap:h,markerMap:f,showGhostStones:d,showLines:_,showSelection:m,init:v}=this.state;return console.log("in render"),v||this.initBoard(),console.log("in render2"),e("section",{style:{display:"grid",gridTemplateColumns:"15em auto",gridColumnGap:"1em"}},e("div",{},e(i,{innerProps:{onContextMenu:e=>e.preventDefault()},vertexSize:t,animate:!0,busy:r,coordX:s?e=>chineseCoord[e]:void 0,coordY:s?e=>e+1:void 0,signMap:n,showCoordinates:!0,markerMap:f,onVertexMouseUp:(e,[t,n])=>{e.button,this.waiting||(this.waiting=!0,this.play(1,[t,n]).then((e=>{this.placeStone(1,e)})).then((()=>this.genmove(-1).then((e=>{this.placeStone(-1,e)})))).then((()=>{this.waiting=!1})))}})))}}),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,